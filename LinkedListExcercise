#pragma once
#include <iostream>
#include <string>

#include "LinkedList.h"
template <typename T>
void LinkedList<T>::insertOrdered(const T& newData) {
//std::cout << "In insertOrdered, data to insert: " << newData<< std::endl;

  auto newNode = new Node(newData);

  // Empty list corner case
  if(!head_) {
    head_ = newNode;
    tail_ = newNode;
     ++size_;
     return;
  }

  auto curr = head_;
  bool break_from_loop = false;

  while(curr && !break_from_loop) {
    //std::cout << "In while loop (initial): " << curr->data << std::endl;
    if( newData < curr->data ) {
      auto prevNode = curr->prev;

      if(!curr->prev) {
        newNode->next = head_;
        head_->prev = newNode;
        head_ = newNode;
        break_from_loop = true;
      }
      else {
        prevNode->next = newNode;
        newNode->prev = prevNode;
        newNode->next = curr;
        curr->prev = newNode;
        break_from_loop = true;
      }
    }// end if newData < curr->data 
    else {
      if (!curr->next) {
        curr->next = newNode;
        newNode->prev = curr;
        tail_ = newNode;
        break_from_loop = true;
      }
      else {
        curr = curr->next;
      }
    } // else newData > curr->data 
  }// while

  ++size_;
  //std::cout << "List at end of insertOrdered: " << *this << std::endl;
}
